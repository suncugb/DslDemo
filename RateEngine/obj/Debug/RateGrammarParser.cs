//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\my documents\visual studio 2013\Projects\RateEngine\RateEngine\RateGrammar.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RateEngine {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class RateGrammarParser : Parser {
	public const int
		CARTYPE=1, NUMBER=2, TIME=3, CASEHEAD=4, LIMITHEAD=5, DAYLIMIT=6, MONTHLIMIT=7, 
		OUTDAY=8, WORKDAY=9, APINAME=10, LEFT_CURLY=11, RIGHT_CURLY=12, COLON=13, 
		LEFT_BRACKET=14, RIGHT_BRACKET=15, HYPHEN=16, LEFT_PAREN=17, RIGHT_PAREN=18, 
		MUL=19, LINE_COMMENT=20, WS=21;
	public const int
		RULE_compileUnit = 0, RULE_case_head = 1, RULE_left_parktime = 2, RULE_right_parktime = 3, 
		RULE_left_time = 4, RULE_middle_time = 5, RULE_right_time = 6, RULE_workday = 7, 
		RULE_case_condition = 8, RULE_value = 9, RULE_parameter = 10, RULE_api = 11, 
		RULE_case_body = 12, RULE_case_expression = 13, RULE_case_expressions = 14, 
		RULE_limit_head = 15, RULE_limit_condition = 16, RULE_limit_body = 17, 
		RULE_limit_expression = 18, RULE_limit_expressions = 19, RULE_cartype_head = 20, 
		RULE_cartype_body = 21, RULE_cartype_expression = 22, RULE_cartype_expressions = 23, 
		RULE_configfile = 24;
	public static readonly string[] ruleNames = {
		"compileUnit", "case_head", "left_parktime", "right_parktime", "left_time", 
		"middle_time", "right_time", "workday", "case_condition", "value", "parameter", 
		"api", "case_body", "case_expression", "case_expressions", "limit_head", 
		"limit_condition", "limit_body", "limit_expression", "limit_expressions", 
		"cartype_head", "cartype_body", "cartype_expression", "cartype_expressions", 
		"configfile"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'day'", "'month'", "'24h+'", null, 
		null, "'{'", "'}'", "':'", "'['", "']'", "'-'", "'('", "')'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CARTYPE", "NUMBER", "TIME", "CASEHEAD", "LIMITHEAD", "DAYLIMIT", 
		"MONTHLIMIT", "OUTDAY", "WORKDAY", "APINAME", "LEFT_CURLY", "RIGHT_CURLY", 
		"COLON", "LEFT_BRACKET", "RIGHT_BRACKET", "HYPHEN", "LEFT_PAREN", "RIGHT_PAREN", 
		"MUL", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RateGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RateGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RateGrammarParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_headContext : ParserRuleContext {
		public ITerminalNode CASEHEAD() { return GetToken(RateGrammarParser.CASEHEAD, 0); }
		public Case_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_head; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCase_head(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCase_head(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_head(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_headContext case_head() {
		Case_headContext _localctx = new Case_headContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_case_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(CASEHEAD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_parktimeContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(RateGrammarParser.NUMBER, 0); }
		public Left_parktimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_parktime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterLeft_parktime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitLeft_parktime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_parktime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_parktimeContext left_parktime() {
		Left_parktimeContext _localctx = new Left_parktimeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_left_parktime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_parktimeContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(RateGrammarParser.NUMBER, 0); }
		public Right_parktimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_parktime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterRight_parktime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitRight_parktime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_parktime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_parktimeContext right_parktime() {
		Right_parktimeContext _localctx = new Right_parktimeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_right_parktime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_timeContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(RateGrammarParser.TIME, 0); }
		public Left_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterLeft_time(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitLeft_time(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_time(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_timeContext left_time() {
		Left_timeContext _localctx = new Left_timeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_left_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Middle_timeContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(RateGrammarParser.TIME, 0); }
		public Middle_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_middle_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterMiddle_time(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitMiddle_time(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMiddle_time(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Middle_timeContext middle_time() {
		Middle_timeContext _localctx = new Middle_timeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_middle_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_timeContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(RateGrammarParser.TIME, 0); }
		public Right_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterRight_time(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitRight_time(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_time(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_timeContext right_time() {
		Right_timeContext _localctx = new Right_timeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_right_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorkdayContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(RateGrammarParser.LEFT_BRACKET, 0); }
		public ITerminalNode WORKDAY() { return GetToken(RateGrammarParser.WORKDAY, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(RateGrammarParser.RIGHT_BRACKET, 0); }
		public WorkdayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_workday; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterWorkday(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitWorkday(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorkday(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorkdayContext workday() {
		WorkdayContext _localctx = new WorkdayContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_workday);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(LEFT_BRACKET);
			State = 65; Match(WORKDAY);
			State = 66; Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_conditionContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(RateGrammarParser.LEFT_BRACKET, 0); }
		public Left_parktimeContext left_parktime() {
			return GetRuleContext<Left_parktimeContext>(0);
		}
		public ITerminalNode[] HYPHEN() { return GetTokens(RateGrammarParser.HYPHEN); }
		public ITerminalNode HYPHEN(int i) {
			return GetToken(RateGrammarParser.HYPHEN, i);
		}
		public Right_parktimeContext right_parktime() {
			return GetRuleContext<Right_parktimeContext>(0);
		}
		public ITerminalNode RIGHT_BRACKET() { return GetToken(RateGrammarParser.RIGHT_BRACKET, 0); }
		public WorkdayContext workday() {
			return GetRuleContext<WorkdayContext>(0);
		}
		public Left_timeContext left_time() {
			return GetRuleContext<Left_timeContext>(0);
		}
		public Right_timeContext right_time() {
			return GetRuleContext<Right_timeContext>(0);
		}
		public Middle_timeContext middle_time() {
			return GetRuleContext<Middle_timeContext>(0);
		}
		public ITerminalNode OUTDAY() { return GetToken(RateGrammarParser.OUTDAY, 0); }
		public Case_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCase_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCase_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_conditionContext case_condition() {
		Case_conditionContext _localctx = new Case_conditionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_case_condition);
		try {
			State = 118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; Match(LEFT_BRACKET);
				State = 69; left_parktime();
				State = 70; Match(HYPHEN);
				State = 71; right_parktime();
				State = 72; Match(RIGHT_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; Match(LEFT_BRACKET);
				State = 75; left_parktime();
				State = 76; Match(HYPHEN);
				State = 77; right_parktime();
				State = 78; Match(RIGHT_BRACKET);
				State = 79; workday();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81; Match(LEFT_BRACKET);
				State = 82; left_time();
				State = 83; Match(HYPHEN);
				State = 84; right_time();
				State = 85; Match(RIGHT_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87; Match(LEFT_BRACKET);
				State = 88; left_time();
				State = 89; Match(HYPHEN);
				State = 90; right_time();
				State = 91; Match(RIGHT_BRACKET);
				State = 92; workday();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 94; Match(LEFT_BRACKET);
				State = 95; left_time();
				State = 96; Match(HYPHEN);
				State = 97; middle_time();
				State = 98; Match(HYPHEN);
				State = 99; right_time();
				State = 100; Match(RIGHT_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 102; Match(LEFT_BRACKET);
				State = 103; left_time();
				State = 104; Match(HYPHEN);
				State = 105; middle_time();
				State = 106; Match(HYPHEN);
				State = 107; right_time();
				State = 108; Match(RIGHT_BRACKET);
				State = 109; workday();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 111; Match(LEFT_BRACKET);
				State = 112; Match(OUTDAY);
				State = 113; Match(RIGHT_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 114; Match(LEFT_BRACKET);
				State = 115; Match(OUTDAY);
				State = 116; Match(RIGHT_BRACKET);
				State = 117; workday();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(RateGrammarParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(RateGrammarParser.NUMBER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApiContext : ParserRuleContext {
		public ITerminalNode APINAME() { return GetToken(RateGrammarParser.APINAME, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(RateGrammarParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(RateGrammarParser.RIGHT_PAREN, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ApiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_api; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterApi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitApi(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApiContext api() {
		ApiContext _localctx = new ApiContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_api);
		try {
			State = 132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; Match(APINAME);
				State = 125; Match(LEFT_PAREN);
				State = 126; Match(RIGHT_PAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(APINAME);
				State = 128; Match(LEFT_PAREN);
				State = 129; parameter();
				State = 130; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_bodyContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ApiContext api() {
			return GetRuleContext<ApiContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(RateGrammarParser.MUL, 0); }
		public ITerminalNode NUMBER() { return GetToken(RateGrammarParser.NUMBER, 0); }
		public Case_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCase_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCase_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_bodyContext case_body() {
		Case_bodyContext _localctx = new Case_bodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_case_body);
		try {
			State = 140;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; value();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; api();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136; api();
				State = 137; Match(MUL);
				State = 138; Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public Case_headContext case_head() {
			return GetRuleContext<Case_headContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(RateGrammarParser.COLON, 0); }
		public Case_conditionContext case_condition() {
			return GetRuleContext<Case_conditionContext>(0);
		}
		public Case_bodyContext case_body() {
			return GetRuleContext<Case_bodyContext>(0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_case_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; case_head();
			State = 143; Match(COLON);
			State = 144; case_condition();
			State = 145; case_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionsContext : ParserRuleContext {
		public Case_expressionContext[] case_expression() {
			return GetRuleContexts<Case_expressionContext>();
		}
		public Case_expressionContext case_expression(int i) {
			return GetRuleContext<Case_expressionContext>(i);
		}
		public Case_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCase_expressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCase_expressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionsContext case_expressions() {
		Case_expressionsContext _localctx = new Case_expressionsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_case_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 147; case_expression();
				}
				}
				State = 150;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CASEHEAD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_headContext : ParserRuleContext {
		public ITerminalNode LIMITHEAD() { return GetToken(RateGrammarParser.LIMITHEAD, 0); }
		public Limit_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_head; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterLimit_head(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitLimit_head(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_head(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_headContext limit_head() {
		Limit_headContext _localctx = new Limit_headContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_limit_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(LIMITHEAD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_conditionContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(RateGrammarParser.LEFT_BRACKET, 0); }
		public Case_headContext case_head() {
			return GetRuleContext<Case_headContext>(0);
		}
		public ITerminalNode RIGHT_BRACKET() { return GetToken(RateGrammarParser.RIGHT_BRACKET, 0); }
		public ITerminalNode DAYLIMIT() { return GetToken(RateGrammarParser.DAYLIMIT, 0); }
		public ITerminalNode MONTHLIMIT() { return GetToken(RateGrammarParser.MONTHLIMIT, 0); }
		public Limit_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterLimit_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitLimit_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_conditionContext limit_condition() {
		Limit_conditionContext _localctx = new Limit_conditionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_limit_condition);
		try {
			State = 164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; Match(LEFT_BRACKET);
				State = 155; case_head();
				State = 156; Match(RIGHT_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(LEFT_BRACKET);
				State = 159; Match(DAYLIMIT);
				State = 160; Match(RIGHT_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161; Match(LEFT_BRACKET);
				State = 162; Match(MONTHLIMIT);
				State = 163; Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_bodyContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Limit_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterLimit_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitLimit_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_bodyContext limit_body() {
		Limit_bodyContext _localctx = new Limit_bodyContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_limit_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_expressionContext : ParserRuleContext {
		public Limit_headContext limit_head() {
			return GetRuleContext<Limit_headContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(RateGrammarParser.COLON, 0); }
		public Limit_conditionContext limit_condition() {
			return GetRuleContext<Limit_conditionContext>(0);
		}
		public Limit_bodyContext limit_body() {
			return GetRuleContext<Limit_bodyContext>(0);
		}
		public Limit_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterLimit_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitLimit_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_expressionContext limit_expression() {
		Limit_expressionContext _localctx = new Limit_expressionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_limit_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; limit_head();
			State = 169; Match(COLON);
			State = 170; limit_condition();
			State = 171; limit_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_expressionsContext : ParserRuleContext {
		public Limit_expressionContext[] limit_expression() {
			return GetRuleContexts<Limit_expressionContext>();
		}
		public Limit_expressionContext limit_expression(int i) {
			return GetRuleContext<Limit_expressionContext>(i);
		}
		public Limit_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterLimit_expressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitLimit_expressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_expressionsContext limit_expressions() {
		Limit_expressionsContext _localctx = new Limit_expressionsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_limit_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 173; limit_expression();
				}
				}
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LIMITHEAD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cartype_headContext : ParserRuleContext {
		public ITerminalNode CARTYPE() { return GetToken(RateGrammarParser.CARTYPE, 0); }
		public Cartype_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cartype_head; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCartype_head(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCartype_head(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCartype_head(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cartype_headContext cartype_head() {
		Cartype_headContext _localctx = new Cartype_headContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_cartype_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(CARTYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cartype_bodyContext : ParserRuleContext {
		public Case_expressionsContext case_expressions() {
			return GetRuleContext<Case_expressionsContext>(0);
		}
		public Limit_expressionsContext limit_expressions() {
			return GetRuleContext<Limit_expressionsContext>(0);
		}
		public Cartype_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cartype_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCartype_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCartype_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCartype_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cartype_bodyContext cartype_body() {
		Cartype_bodyContext _localctx = new Cartype_bodyContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_cartype_body);
		try {
			State = 184;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; case_expressions();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181; case_expressions();
				State = 182; limit_expressions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cartype_expressionContext : ParserRuleContext {
		public Cartype_headContext cartype_head() {
			return GetRuleContext<Cartype_headContext>(0);
		}
		public ITerminalNode LEFT_CURLY() { return GetToken(RateGrammarParser.LEFT_CURLY, 0); }
		public Cartype_bodyContext cartype_body() {
			return GetRuleContext<Cartype_bodyContext>(0);
		}
		public ITerminalNode RIGHT_CURLY() { return GetToken(RateGrammarParser.RIGHT_CURLY, 0); }
		public Cartype_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cartype_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCartype_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCartype_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCartype_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cartype_expressionContext cartype_expression() {
		Cartype_expressionContext _localctx = new Cartype_expressionContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_cartype_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; cartype_head();
			State = 187; Match(LEFT_CURLY);
			State = 188; cartype_body();
			State = 189; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cartype_expressionsContext : ParserRuleContext {
		public Cartype_expressionContext[] cartype_expression() {
			return GetRuleContexts<Cartype_expressionContext>();
		}
		public Cartype_expressionContext cartype_expression(int i) {
			return GetRuleContext<Cartype_expressionContext>(i);
		}
		public Cartype_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cartype_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterCartype_expressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitCartype_expressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCartype_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cartype_expressionsContext cartype_expressions() {
		Cartype_expressionsContext _localctx = new Cartype_expressionsContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_cartype_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 191; cartype_expression();
				}
				}
				State = 194;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CARTYPE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigfileContext : ParserRuleContext {
		public Cartype_expressionsContext cartype_expressions() {
			return GetRuleContext<Cartype_expressionsContext>(0);
		}
		public ConfigfileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configfile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.EnterConfigfile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRateGrammarListener typedListener = listener as IRateGrammarListener;
			if (typedListener != null) typedListener.ExitConfigfile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRateGrammarVisitor<TResult> typedVisitor = visitor as IRateGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigfile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigfileContext configfile() {
		ConfigfileContext _localctx = new ConfigfileContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_configfile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; cartype_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x17\xC9\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b"+
		"\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"y\n\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r"+
		"\x87\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x8F\n\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\x10\x6\x10\x97\n\x10\r\x10\xE\x10\x98\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\xA7\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x15\x6\x15\xB1\n\x15\r\x15\xE\x15\xB2\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x5\x17\xBB\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x6\x19\xC3\n\x19\r\x19\xE\x19\xC4\x3\x1A\x3\x1A\x3\x1A\x2\x2\x2\x1B"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x2\x2\xBF\x2\x34\x3\x2\x2\x2\x4\x36\x3\x2\x2\x2\x6\x38\x3\x2\x2\x2\b"+
		":\x3\x2\x2\x2\n<\x3\x2\x2\x2\f>\x3\x2\x2\x2\xE@\x3\x2\x2\x2\x10\x42\x3"+
		"\x2\x2\x2\x12x\x3\x2\x2\x2\x14z\x3\x2\x2\x2\x16|\x3\x2\x2\x2\x18\x86\x3"+
		"\x2\x2\x2\x1A\x8E\x3\x2\x2\x2\x1C\x90\x3\x2\x2\x2\x1E\x96\x3\x2\x2\x2"+
		" \x9A\x3\x2\x2\x2\"\xA6\x3\x2\x2\x2$\xA8\x3\x2\x2\x2&\xAA\x3\x2\x2\x2"+
		"(\xB0\x3\x2\x2\x2*\xB4\x3\x2\x2\x2,\xBA\x3\x2\x2\x2.\xBC\x3\x2\x2\x2\x30"+
		"\xC2\x3\x2\x2\x2\x32\xC6\x3\x2\x2\x2\x34\x35\a\x2\x2\x3\x35\x3\x3\x2\x2"+
		"\x2\x36\x37\a\x6\x2\x2\x37\x5\x3\x2\x2\x2\x38\x39\a\x4\x2\x2\x39\a\x3"+
		"\x2\x2\x2:;\a\x4\x2\x2;\t\x3\x2\x2\x2<=\a\x5\x2\x2=\v\x3\x2\x2\x2>?\a"+
		"\x5\x2\x2?\r\x3\x2\x2\x2@\x41\a\x5\x2\x2\x41\xF\x3\x2\x2\x2\x42\x43\a"+
		"\x10\x2\x2\x43\x44\a\v\x2\x2\x44\x45\a\x11\x2\x2\x45\x11\x3\x2\x2\x2\x46"+
		"G\a\x10\x2\x2GH\x5\x6\x4\x2HI\a\x12\x2\x2IJ\x5\b\x5\x2JK\a\x11\x2\x2K"+
		"y\x3\x2\x2\x2LM\a\x10\x2\x2MN\x5\x6\x4\x2NO\a\x12\x2\x2OP\x5\b\x5\x2P"+
		"Q\a\x11\x2\x2QR\x5\x10\t\x2Ry\x3\x2\x2\x2ST\a\x10\x2\x2TU\x5\n\x6\x2U"+
		"V\a\x12\x2\x2VW\x5\xE\b\x2WX\a\x11\x2\x2Xy\x3\x2\x2\x2YZ\a\x10\x2\x2Z"+
		"[\x5\n\x6\x2[\\\a\x12\x2\x2\\]\x5\xE\b\x2]^\a\x11\x2\x2^_\x5\x10\t\x2"+
		"_y\x3\x2\x2\x2`\x61\a\x10\x2\x2\x61\x62\x5\n\x6\x2\x62\x63\a\x12\x2\x2"+
		"\x63\x64\x5\f\a\x2\x64\x65\a\x12\x2\x2\x65\x66\x5\xE\b\x2\x66g\a\x11\x2"+
		"\x2gy\x3\x2\x2\x2hi\a\x10\x2\x2ij\x5\n\x6\x2jk\a\x12\x2\x2kl\x5\f\a\x2"+
		"lm\a\x12\x2\x2mn\x5\xE\b\x2no\a\x11\x2\x2op\x5\x10\t\x2py\x3\x2\x2\x2"+
		"qr\a\x10\x2\x2rs\a\n\x2\x2sy\a\x11\x2\x2tu\a\x10\x2\x2uv\a\n\x2\x2vw\a"+
		"\x11\x2\x2wy\x5\x10\t\x2x\x46\x3\x2\x2\x2xL\x3\x2\x2\x2xS\x3\x2\x2\x2"+
		"xY\x3\x2\x2\x2x`\x3\x2\x2\x2xh\x3\x2\x2\x2xq\x3\x2\x2\x2xt\x3\x2\x2\x2"+
		"y\x13\x3\x2\x2\x2z{\a\x4\x2\x2{\x15\x3\x2\x2\x2|}\a\x4\x2\x2}\x17\x3\x2"+
		"\x2\x2~\x7F\a\f\x2\x2\x7F\x80\a\x13\x2\x2\x80\x87\a\x14\x2\x2\x81\x82"+
		"\a\f\x2\x2\x82\x83\a\x13\x2\x2\x83\x84\x5\x16\f\x2\x84\x85\a\x14\x2\x2"+
		"\x85\x87\x3\x2\x2\x2\x86~\x3\x2\x2\x2\x86\x81\x3\x2\x2\x2\x87\x19\x3\x2"+
		"\x2\x2\x88\x8F\x5\x14\v\x2\x89\x8F\x5\x18\r\x2\x8A\x8B\x5\x18\r\x2\x8B"+
		"\x8C\a\x15\x2\x2\x8C\x8D\a\x4\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x88\x3\x2"+
		"\x2\x2\x8E\x89\x3\x2\x2\x2\x8E\x8A\x3\x2\x2\x2\x8F\x1B\x3\x2\x2\x2\x90"+
		"\x91\x5\x4\x3\x2\x91\x92\a\xF\x2\x2\x92\x93\x5\x12\n\x2\x93\x94\x5\x1A"+
		"\xE\x2\x94\x1D\x3\x2\x2\x2\x95\x97\x5\x1C\xF\x2\x96\x95\x3\x2\x2\x2\x97"+
		"\x98\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x1F\x3\x2"+
		"\x2\x2\x9A\x9B\a\a\x2\x2\x9B!\x3\x2\x2\x2\x9C\x9D\a\x10\x2\x2\x9D\x9E"+
		"\x5\x4\x3\x2\x9E\x9F\a\x11\x2\x2\x9F\xA7\x3\x2\x2\x2\xA0\xA1\a\x10\x2"+
		"\x2\xA1\xA2\a\b\x2\x2\xA2\xA7\a\x11\x2\x2\xA3\xA4\a\x10\x2\x2\xA4\xA5"+
		"\a\t\x2\x2\xA5\xA7\a\x11\x2\x2\xA6\x9C\x3\x2\x2\x2\xA6\xA0\x3\x2\x2\x2"+
		"\xA6\xA3\x3\x2\x2\x2\xA7#\x3\x2\x2\x2\xA8\xA9\x5\x14\v\x2\xA9%\x3\x2\x2"+
		"\x2\xAA\xAB\x5 \x11\x2\xAB\xAC\a\xF\x2\x2\xAC\xAD\x5\"\x12\x2\xAD\xAE"+
		"\x5$\x13\x2\xAE\'\x3\x2\x2\x2\xAF\xB1\x5&\x14\x2\xB0\xAF\x3\x2\x2\x2\xB1"+
		"\xB2\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3)\x3\x2\x2"+
		"\x2\xB4\xB5\a\x3\x2\x2\xB5+\x3\x2\x2\x2\xB6\xBB\x5\x1E\x10\x2\xB7\xB8"+
		"\x5\x1E\x10\x2\xB8\xB9\x5(\x15\x2\xB9\xBB\x3\x2\x2\x2\xBA\xB6\x3\x2\x2"+
		"\x2\xBA\xB7\x3\x2\x2\x2\xBB-\x3\x2\x2\x2\xBC\xBD\x5*\x16\x2\xBD\xBE\a"+
		"\r\x2\x2\xBE\xBF\x5,\x17\x2\xBF\xC0\a\xE\x2\x2\xC0/\x3\x2\x2\x2\xC1\xC3"+
		"\x5.\x18\x2\xC2\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2"+
		"\xC4\xC5\x3\x2\x2\x2\xC5\x31\x3\x2\x2\x2\xC6\xC7\x5\x30\x19\x2\xC7\x33"+
		"\x3\x2\x2\x2\nx\x86\x8E\x98\xA6\xB2\xBA\xC4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace RateEngine
